// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String      @id
  email                    String      @unique
  name                     String
  password_hash            String
  role                     String      @default("user")
  unitId                   String?
  unit                     Unit?       @relation(fields: [unitId], references: [id])
  created_at               DateTime    @default(now())
  updated_at               DateTime    @updatedAt
  created                  Request[]   @relation("CreatedBy")
  submitted                Request[]   @relation("SubmittedBy")
  budgetApproved           Request[]   @relation("BudgetApprovedBy")
  financeApproved          Request[]   @relation("FinanceApprovedBy")
  completed                Request[]   @relation("CompletedBy")
  rejected                 Request[]   @relation("RejectedBy")
  clearanceRejected        Clearance[] @relation("ClearanceRejectedBy")
  clearanceSubmitted       Clearance[] @relation("ClearanceSubmittedBy")
  clearanceBudgetApproved  Clearance[] @relation("ClearanceBudgetApprovedBy")
  clearanceFinanceApproved Clearance[] @relation("ClearanceFinanceApprovedBy")
  clearanceCompleted       Clearance[] @relation("ClearanceCompletedBy")
}

model Unit {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  users     User[]
  Request   Request[]
}

model Donor {
  id        String    @id @default(cuid())
  name      String
  code      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Project   Project[]
}

model Project {
  id            String     @id @default(cuid())
  name          String
  code          String
  start_year    Int
  end_year      Int?
  donorId       String
  strategicCode Int?
  amount        Float?
  file          String?
  donor         Donor      @relation(fields: [donorId], references: [id], onDelete: Cascade)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  activity      Activity[]
}

model Workplan {
  id          String     @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  activity    Activity[]
}

model Activity {
  id         String    @id @default(cuid())
  number     Int       @default(autoincrement())
  code       String?
  name       String
  workplanId String
  projectId  String
  budget     Float?
  workplan   Workplan  @relation(fields: [workplanId], references: [id])
  project    Project   @relation(fields: [projectId], references: [id])
  requests   Request[]
}

model Request {
  id                       String        @id @default(cuid())
  number                   Int           @default(autoincrement())
  title                    String
  type                     String        @default("service")
  status                   String        @default("created")
  activityId               String
  unitId                   String?
  createdById              String
  rejectedById             String?
  rejectedAt               DateTime?
  rejectedRemarks          String?
  submittedById            String?
  submittedAt              DateTime?
  submittedSignature       String?
  budgetApprovedById       String?
  budgetApprovedAt         DateTime?
  budgetApprovedSignature  String?
  financeApprovedById      String?
  financeApprovedAt        DateTime?
  financeApprovedSignature String?
  completedById            String?
  completedAt              DateTime?
  completedSignature       String?
  remarks                  String?
  activity                 Activity      @relation(fields: [activityId], references: [id])
  unit                     Unit?         @relation(fields: [unitId], references: [id])
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
  requestItems             RequestItem[]
  createdBy                User?         @relation("CreatedBy", fields: [createdById], references: [id])
  rejectedBy               User?         @relation("RejectedBy", fields: [rejectedById], references: [id])
  submittedBy              User?         @relation("SubmittedBy", fields: [submittedById], references: [id])
  budgetApprovedBy         User?         @relation("BudgetApprovedBy", fields: [budgetApprovedById], references: [id])
  financeApprovedBy        User?         @relation("FinanceApprovedBy", fields: [financeApprovedById], references: [id])
  completedBy              User?         @relation("CompletedBy", fields: [completedById], references: [id])
  clearance                Clearance[]
}

model RequestItem {
  id          String   @id @default(cuid())
  requestId   String
  name        String
  remarks     String?
  qty         Int
  rate        Float
  amount      Float
  expenditure Float?   @default(0)
  request     Request  @relation(fields: [requestId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Clearance {
  id                       String    @id @default(cuid())
  number                   Int       @default(autoincrement())
  status                   String    @default("created")
  remarks                  String?
  requestId                String
  rejectedById             String?
  rejectedAt               DateTime?
  rejectedRemarks          String?
  submittedById            String?
  submittedSignature       String?
  submittedAt              DateTime?
  budgetApprovedById       String?
  budgetApprovedAt         DateTime?
  budgetApprovedSignature  String?
  financeApprovedById      String?
  financeApprovedAt        DateTime?
  financeApprovedSignature String?
  completedById            String?
  completedSignature       String?
  completedAt              DateTime?
  request                  Request   @relation(fields: [requestId], references: [id])
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  rejectedBy               User?     @relation("ClearanceRejectedBy", fields: [rejectedById], references: [id])
  submittedBy              User?     @relation("ClearanceSubmittedBy", fields: [submittedById], references: [id])
  budgetApprovedBy         User?     @relation("ClearanceBudgetApprovedBy", fields: [budgetApprovedById], references: [id])
  financeApprovedBy        User?     @relation("ClearanceFinanceApprovedBy", fields: [financeApprovedById], references: [id])
  completedBy              User?     @relation("ClearanceCompletedBy", fields: [completedById], references: [id])
}
