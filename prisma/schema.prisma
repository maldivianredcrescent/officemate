// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id
  email           String    @unique
  name            String
  password_hash   String
  role            String    @default("user")
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  submitted       Request[] @relation("SubmittedBy")
  budgetApproved  Request[] @relation("BudgetApprovedBy")
  financeApproved Request[] @relation("FinanceApprovedBy")
}

model Donor {
  id        String    @id @default(cuid())
  name      String
  code      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Project   Project[]
}

model Project {
  id            String     @id @default(cuid())
  name          String
  code          String
  start_year    Int
  end_year      Int?
  donorId       String
  strategicCode Int?
  amount        Float?
  file          String?
  donor         Donor      @relation(fields: [donorId], references: [id], onDelete: Cascade)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  Activity      Activity[]
}

model Workplan {
  id          String     @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Activity    Activity[]
}

model Activity {
  id         String    @id @default(cuid())
  name       String
  workplanId String
  projectId  String
  budget     Float?
  workplan   Workplan  @relation(fields: [workplanId], references: [id])
  project    Project   @relation(fields: [projectId], references: [id])
  Request    Request[]
}

model Request {
  id                  String        @id @default(cuid())
  type                String        @default("service")
  activityId          String
  submittedById       String?
  budgetApprovedById  String?
  financeApprovedById String?
  activity            Activity      @relation(fields: [activityId], references: [id])
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  requestItems        RequestItem[]
  submittedBy         User?         @relation("SubmittedBy", fields: [submittedById], references: [id])
  budgetApprovedBy    User?         @relation("BudgetApprovedBy", fields: [budgetApprovedById], references: [id])
  financeApprovedBy   User?         @relation("FinanceApprovedBy", fields: [financeApprovedById], references: [id])
}

model RequestItem {
  id        String   @id @default(cuid())
  requestId String
  name      String
  qty       Int
  rate      Float
  amount    Float
  request   Request  @relation(fields: [requestId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
