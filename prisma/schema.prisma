// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String      @id
  email                    String      @unique
  name                     String
  designation              String?
  password_hash            String
  role                     String      @default("user")
  unitId                   String?
  signatureUrl             String?
  unit                     Unit?       @relation(fields: [unitId], references: [id])
  created_at               DateTime    @default(now())
  updated_at               DateTime    @updatedAt
  created                  Request[]   @relation("CreatedBy")
  submitted                Request[]   @relation("SubmittedBy")
  budgetApproved           Request[]   @relation("BudgetApprovedBy")
  financeApproved          Request[]   @relation("FinanceApprovedBy")
  paymentProcessed         Request[]   @relation("PaymentProcessedBy")
  completed                Request[]   @relation("CompletedBy")
  rejected                 Request[]   @relation("RejectedBy")
  clearanceRejected        Clearance[] @relation("ClearanceRejectedBy")
  clearanceSubmitted       Clearance[] @relation("ClearanceSubmittedBy")
  clearanceBudgetApproved  Clearance[] @relation("ClearanceBudgetApprovedBy")
  clearanceFinanceApproved Clearance[] @relation("ClearanceFinanceApprovedBy")
  clearanceCompleted       Clearance[] @relation("ClearanceCompletedBy")
  projects                 Project[]   @relation("ProjectUser")
}

model Unit {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  users     User[]
  Request   Request[]
}

model Donor {
  id        String    @id @default(cuid())
  name      String
  code      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Project   Project[]
}

model Project {
  id            String     @id @default(cuid())
  name          String
  code          String
  start_year    Int
  end_year      Int?
  donorId       String
  strategicCode Int?
  amount        Float?
  userId        String?
  user          User?      @relation("ProjectUser", fields: [userId], references: [id])
  file          String?
  donor         Donor      @relation(fields: [donorId], references: [id], onDelete: Cascade)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  activity      Activity[]
}

model Workplan {
  id                   String                @id @default(cuid())
  name                 String
  description          String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  activity             Activity[]
  workplanMiscPayments WorkplanMiscPayment[]
}

model WorkplanMiscPayment {
  id          String    @id @default(cuid())
  workplanId  String
  activityId  String?
  workplan    Workplan  @relation(fields: [workplanId], references: [id])
  activity    Activity? @relation(fields: [activityId], references: [id])
  name        String
  description String?
  amount      Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Activity {
  id                  String                @id @default(cuid())
  number              Int                   @default(autoincrement())
  code                String?
  name                String
  workplanId          String
  projectId           String
  budget              Float?
  workplan            Workplan              @relation(fields: [workplanId], references: [id])
  project             Project               @relation(fields: [projectId], references: [id])
  requests            Request[]
  WorkplanMiscPayment WorkplanMiscPayment[]
}

model Request {
  id                          String            @id @default(cuid())
  number                      Int               @default(autoincrement())
  title                       String
  type                        String            @default("service")
  status                      String            @default("created")
  statusNote                  String?
  activityId                  String
  unitId                      String?
  createdById                 String
  rejectedById                String?
  rejectedAt                  DateTime?
  rejectedRemarks             String?
  submittedById               String?
  submittedAt                 DateTime?
  submittedSignature          String?
  submittedDesignation        String?
  budgetApprovedById          String?
  budgetApprovedAt            DateTime?
  budgetApprovedSignature     String?
  budgetApprovedDesignation   String?
  financeApprovedById         String?
  financeApprovedAt           DateTime?
  financeApprovedSignature    String?
  financeApprovedDesignation  String?
  paymentProcessedById        String?
  paymentProcessedAt          DateTime?
  paymentProcessedSignature   String?
  paymentProcessedDesignation String?
  completedById               String?
  completedAt                 DateTime?
  completedSignature          String?
  completedDesignation        String?
  remarks                     String?
  activity                    Activity          @relation(fields: [activityId], references: [id])
  unit                        Unit?             @relation(fields: [unitId], references: [id])
  createdAt                   DateTime          @default(now())
  updatedAt                   DateTime          @updatedAt
  requestItems                RequestItem[]
  createdBy                   User?             @relation("CreatedBy", fields: [createdById], references: [id])
  rejectedBy                  User?             @relation("RejectedBy", fields: [rejectedById], references: [id])
  submittedBy                 User?             @relation("SubmittedBy", fields: [submittedById], references: [id])
  budgetApprovedBy            User?             @relation("BudgetApprovedBy", fields: [budgetApprovedById], references: [id])
  financeApprovedBy           User?             @relation("FinanceApprovedBy", fields: [financeApprovedById], references: [id])
  paymentProcessedBy          User?             @relation("PaymentProcessedBy", fields: [paymentProcessedById], references: [id])
  completedBy                 User?             @relation("CompletedBy", fields: [completedById], references: [id])
  clearances                  Clearance[]
  requestDocuments            RequestDocument[]
}

model RequestItem {
  id            String    @id @default(cuid())
  requestId     String
  name          String
  remarks       String?
  qty           Int
  rate          Float
  amount        Float
  gst           Float?    @default(0)
  tgst          Float?    @default(0)
  serviceCharge Float?    @default(0)
  payee         String?
  documentUrl   String?
  clearanceDate DateTime?
  file          String?
  expenditure   Float?    @default(0)
  request       Request   @relation(fields: [requestId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Clearance {
  id                         String              @id @default(cuid())
  number                     Int                 @default(autoincrement())
  status                     String              @default("created")
  remarks                    String?
  incompleteRemarks          String?
  requestId                  String
  rejectedById               String?
  rejectedAt                 DateTime?
  rejectedRemarks            String?
  submittedById              String?
  submittedSignature         String?
  submittedAt                DateTime?
  submittedDesignation       String?
  budgetApprovedById         String?
  budgetApprovedAt           DateTime?
  budgetApprovedSignature    String?
  budgetApprovedDesignation  String?
  financeApprovedById        String?
  financeApprovedAt          DateTime?
  financeApprovedSignature   String?
  financeApprovedDesignation String?
  completedById              String?
  completedSignature         String?
  completedDesignation       String?
  completedAt                DateTime?
  request                    Request             @relation(fields: [requestId], references: [id])
  createdAt                  DateTime            @default(now())
  updatedAt                  DateTime            @updatedAt
  rejectedBy                 User?               @relation("ClearanceRejectedBy", fields: [rejectedById], references: [id])
  submittedBy                User?               @relation("ClearanceSubmittedBy", fields: [submittedById], references: [id])
  budgetApprovedBy           User?               @relation("ClearanceBudgetApprovedBy", fields: [budgetApprovedById], references: [id])
  financeApprovedBy          User?               @relation("ClearanceFinanceApprovedBy", fields: [financeApprovedById], references: [id])
  completedBy                User?               @relation("ClearanceCompletedBy", fields: [completedById], references: [id])
  clearanceDocuments         ClearanceDocument[]
}

model ClearanceDocument {
  id          String    @id @default(cuid())
  clearanceId String
  name        String
  documentUrl String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  clearance   Clearance @relation(fields: [clearanceId], references: [id])
}

model RequestDocument {
  id          String   @id @default(cuid())
  requestId   String
  name        String
  documentUrl String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  request     Request  @relation(fields: [requestId], references: [id])
}
